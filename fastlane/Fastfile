default_platform(:ios)

platform :ios do
  desc "Run tests including snapshots"
  lane :test do
    # First, remove any existing snapshots directory to ensure clean state
    FileUtils.rm_rf("Tests/ReferenceImages")
    
    # Clone snapshots repository to get reference images
    sh("git clone https://x-access-token:#{ENV['REPO_TOKEN']}@github.com/#{ENV['SNAPSHOT_REPO']}.git snapshots_repo")
    
    # Debug: Print the contents of the cloned repo
    UI.message("Contents of snapshots repository:")
    sh("ls -la snapshots_repo")
    
    # Ensure the ReferenceImages directory exists in the test directory
    FileUtils.mkdir_p("Tests/ReferenceImages")
    
    # Copy ALL reference images from the remote repository
    if Dir.exist?("snapshots_repo/ReferenceImages")
      UI.message("Copying reference images from remote repository...")
      FileUtils.cp_r(Dir["snapshots_repo/ReferenceImages/."], "Tests/ReferenceImages/")
      # Debug: Print the copied files
      UI.message("Copied reference images:")
      sh("ls -la Tests/ReferenceImages")
    else
      UI.error("No ReferenceImages directory found in remote repository!")
      UI.message("Repository structure:")
      sh("ls -R snapshots_repo")
    end

    begin
      scan(
        scheme: "GithubActions",
        device: "iPhone SE (3rd generation)",
        clean: true,
        configuration: "Debug",
        derived_data_path: "DerivedData"
      )

      # Only update remote images if we're on main branch
      if ENV["GITHUB_REF"] == "refs/heads/main"
        UI.message("Updating reference images in remote repository...")
        FileUtils.rm_rf("snapshots_repo/ReferenceImages")
        FileUtils.cp_r("Tests/ReferenceImages", "snapshots_repo/")
        
        Dir.chdir("snapshots_repo") do
          sh("git config user.name 'GitHub Actions Bot'")
          sh("git config user.email 'actions@github.com'")
          sh("git add ReferenceImages")
          status = sh("git status --porcelain", error_callback: ->(result) { puts result })
          unless status.empty?
            sh("git commit -m 'Update snapshot reference images [skip ci]'")
            sh("git push")
          end
        end
      end
    rescue => ex
      UI.error("Tests failed! Error: #{ex.message}")
      UI.error("If this is due to snapshot mismatches, check the test output for details.")
      raise ex
    ensure
      # Clean up local reference images after tests
      FileUtils.rm_rf("Tests/ReferenceImages")
    end
  end
end