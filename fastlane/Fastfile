default_platform(:ios)

platform :ios do
  desc "Run tests including snapshots"
  lane :test do
    root_path = "/Users/runner/work/swift-githubactions/swift-githubactions"

    # Print current path and contents before doing anything
    puts "Current directory: #{Dir.pwd}"
    sh("ls -R #{root_path}/sumer-ios/Tests")

    # Create test output directory
    FileUtils.mkdir_p("#{root_path}/fastlane/test_output)

    # Cleanup old reference images
    FileUtils.rm_rf("#{root_path}/sumer-ios/Tests/MyTestSupport/ReferenceImages")  # Updated path
    
    # Clone snapshot repository
    sh("git clone https://x-access-token:#{ENV['REPO_TOKEN']}@github.com/#{ENV['SNAPSHOT_REPO']}.git GitStorageForSnapshots")
    
    # Create directory for reference images with correct path
    FileUtils.mkdir_p("#{root_path}/sumer-ios/Tests/MyTestSupport/ReferenceImages")  # Updated path
    
    if Dir.exist?("GitStorageForSnapshots/ReferenceImages")
      puts "Found reference images in repository"
      # Copy with verbose flag to see what's being copied
      FileUtils.cp_r(Dir["GitStorageForSnapshots/ReferenceImages/."], "#{root_path}/sumer-ios/Tests/MyTestSupport/ReferenceImages/", verbose: true)
      
      # Verify the copied files
      puts "Contents of reference images directory after copy:"
      sh("ls -R #{root_path}/sumer-ios/Tests/MyTestSupport/ReferenceImages")
    end

    # Rest of your scan configuration...
    scan(
      package_path: "#{root_path}/sumer-ios",
      scheme: "MyFeature",
      device: "iPhone SE (3rd generation)",
      clean: true,
      configuration: "Debug",
      derived_data_path: "#{root_path}/DerivedData",
      output_style: 'raw',
      output_types: 'raw,html,junit',
      result_bundle: true,
      buildlog_path: "#{root_path}/fastlane/test_output",
      include_simulator_logs: true,
      xcargs: "CI=true ENABLE_TESTABILITY=YES ONLY_ACTIVE_ARCH=YES"
    )
  end
end