default_platform(:ios)

platform :ios do
  desc "Run tests including snapshots"
  lane :test do
    project_root = File.expand_path("../../swift-githubactions", __dir__)
    Dir.chdir(project_root)
    
    # Clear derived data to ensure clean state
    FileUtils.rm_rf("DerivedData")
    
    # Cleanup old reference images
    FileUtils.rm_rf("sumer-ios/Tests/ReferenceImages")
    
    # Clone and copy reference images
    sh("git clone --verbose https://x-access-token:#{ENV['REPO_TOKEN']}@github.com/#{ENV['SNAPSHOT_REPO']}.git GitStorageForSnapshots")
    FileUtils.mkdir_p("sumer-ios/Tests/ReferenceImages")
    
    if Dir.exist?("GitStorageForSnapshots/ReferenceImages")
      FileUtils.cp_r(Dir["GitStorageForSnapshots/ReferenceImages/."], "sumer-ios/Tests/ReferenceImages/", verbose: true)
    end

    # Run tests with SPM dependencies resolved first
    scan(
      project: "#{Dir.pwd}/GithubActions.xcodeproj",
      scheme: "GithubActions",
      device: "iPhone SE (3rd generation)",
      clean: true,
      build_for_testing: true,
      configuration: "Debug",
      derived_data_path: "DerivedData",
      output_style: 'raw',
      xcargs: [
        "CI=true",
        "ENABLE_TESTABILITY=YES",
        "ONLY_ACTIVE_ARCH=YES",
        "-resolvePackageDependencies",
        "OTHER_SWIFT_FLAGS='-D SNAPSHOT_TEST'"
      ].join(" ")
    )

    # Now run the actual tests
    scan(
      project: "#{Dir.pwd}/GithubActions.xcodeproj",
      scheme: "GithubActions",
      device: "iPhone SE (3rd generation)",
      clean: false,  # Don't clean between runs
      configuration: "Debug",
      derived_data_path: "DerivedData",
      output_style: 'raw',
      output_types: 'raw,html,junit',
      result_bundle: true,
      buildlog_path: "fastlane/test_output",
      include_simulator_logs: true,
      xcargs: [
        "CI=true",
        "ENABLE_TESTABILITY=YES",
        "ONLY_ACTIVE_ARCH=YES"
      ].join(" ")
    )
  end
end