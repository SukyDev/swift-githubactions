name: iOS CI

on:
  push:
    branches: 
      - 'dev'
      - 'staging'
      - 'main'
  pull_request:
    branches: 
      - 'dev'
      - 'staging'
      - 'main'

env:
  SNAPSHOT_REPO: "SukyDev/GitStorageForSnapshots"

jobs:
  test-and-deploy:
    runs-on: macos-latest

    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
      API_KEY: ${{ secrets.KEY_ID }}
      ISSUER_ID: ${{ secrets.ISSUER_ID }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Dependencies
        run: bundle install

      - name: Install certificates and profiles
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Swift Package Cache
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            ~/.build/checkouts
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
        
      - name: Clean SPM cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          rm -rf ~/.build/checkouts
          rm -rf ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          rm -rf .build

      # Set up required iOS Simulators for testing
      - name: Set up iOS Simulators
        run: |
          xcrun simctl delete all
          xcrun simctl create "iPhone SE (3rd generation)" com.apple.CoreSimulator.SimDeviceType.iPhone-SE-3rd-generation com.apple.CoreSimulator.SimRuntime.iOS-17-4
        
      - name: Run Tests
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
          CI: true
        run: |
          cd sumer-ios
          swift package resolve
          cd .. # Go back to root for fastlane
          bundle exec fastlane test
      
      - name: Determine Environment
        id: determine_env
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == refs/heads/staging/* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Run Tests
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
          CI: true
        run: bundle exec fastlane test

      - name: Deploy to TestFlight
        if: success()
        env:
          ENVIRONMENT: ${{ steps.determine_env.outputs.environment }}
        run: bundle exec fastlane beta environment:${{ steps.determine_env.outputs.environment }}

      - name: Cleanup
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
