name: main

on:
  push:
    branches: [ "vs/github-actions" ]
  pull_request:
    branches: [ "vs/github-actions" ]

jobs:
  test:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3'

      - name: Show build SDK
        run: xcodebuild -showsdks 

      # Install Swift Package Manager dependencies (including SnapshotTesting)
      - name: Install dependencies (SPM)
        run: |
          xcodebuild -resolvePackageDependencies

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Make sure that scheme includes the test target
      - name: List Scheme Information
        run: |
          xcodebuild -project GithubActions.xcodeproj -list
          xcodebuild -project GithubActions.xcodeproj -scheme MyFeature -showBuildSettings

      # Verify cofiguration
      - name: Show Test Target Configuration
        run: |
          xcodebuild -project GithubActions.xcodeproj -scheme MyFeature -showBuildSettings | grep -i "test"

      - name: Build Test Target
        run: |
          xcodebuild build \
            -project GithubActions.xcodeproj \
            -scheme MyFeature \
            -destination 'platform=iOS Simulator,name=iPhone 13' \
            -sdk iphonesimulator \
            -configuration Debug \
            ONLY_ACTIVE_ARCH=YES \
            -verbose
      
      - name: Check Build Products After Build
        if: always()
        run: |
          echo "=== BUILD PRODUCTS AFTER BUILD ==="
          find ~/Library/Developer/Xcode/DerivedData -type d -name "Build"
          find ~/Library/Developer/Xcode/DerivedData -type f -name "*.xctest"

      # Run the snapshot tests using xcodebuild
      # - name: Run Snapshot Tests
      #   run: |
      #     xcodebuild test \
      #     -project GithubActions.xcodeproj \
      #     -scheme MyFeature \
      #     -destination 'platform=iOS Simulator,name=iPhone 13' \
      #     -sdk iphonesimulator \
      #     -only-testing:MyFeatureTests \
      #     -verbose

      # Step 1: Check for existing snapshots in external repo (this will now only check for the ReferenceImages folder)
      - name: Check for existing snapshots in external repo
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  # GitHub PAT for repo access
          SNAPSHOT_REPO: "SukyDev/GitStorageForSnapshots"  # External repository
        id: check_for_existing_snapshots
        run: |
          # Clone the external repository
          git clone https://x-access-token:${REPO_TOKEN}@github.com/${SNAPSHOT_REPO}.git snapshots_repo
          
          # Check if the ReferenceImages directory exists
          if [ ! -d "snapshots_repo/ReferenceImages" ]; then
            echo "Directory ReferenceImages does not exist. Creating it."
            mkdir -p snapshots_repo/ReferenceImages
          fi
          
          # List files in the external snapshots repo for debugging
          echo "Listing snapshot files in ReferenceImages directory:"
          ls -la snapshots_repo/ReferenceImages/

          - name: Fetch Reference Snapshots
          run: |
            git clone https://github.com/SukyDev/GitStorageForSnapshots.git reference_snapshots
            mkdir -p ./sumer-ios/Tests/MyTestSupport/ReferenceImages
            if [ -d "reference_snapshots/ReferenceImages" ]; then
              cp -R reference_snapshots/ReferenceImages/* ./sumer-ios/Tests/MyTestSupport/ReferenceImages/
            fi
        
      - name: Build and Test
        run: |
          # First build for testing to ensure everything is compiled
          xcodebuild build-for-testing \
            -workspace sumer-ios/Package.swift \
            -scheme MyFeatureTests \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2" \
            -sdk iphonesimulator
          
          # Then run the tests
          xcodebuild test-without-building \
            -workspace sumer-ios/Package.swift \
            -scheme MyFeatureTests \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2" \
            -sdk iphonesimulator
        
      - name: Record New Snapshots
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd snapshots_repo
          
          # Only if there are differences, commit and push
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
            git add ReferenceImages/*/*.png
            git commit -m "Update snapshot images"
            git remote set-url origin https://${GITHUB_TOKEN}@github.com/SukyDev/GitStorageForSnapshots.git
            git push origin main
          else
            echo "No snapshot changes detected"
          fi

      - name: Run Snapshot Tests
        run: |
          xcodebuild test \
            -scheme MyFeature \
            -destination "platform=iOS Simulator,name=iPhone 13" \
            -sdk iphonesimulator \
            -only-testing:MyFeatureTests \
            | xcpretty && exit ${PIPESTATUS[0]}

      - name: Record New Snapshot Images
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Create base directory structure
          mkdir -p snapshots_repo/ReferenceImages
      
          SOURCE_DIR="./sumer-ios/Tests/MyTestSupport/ReferenceImages"
          
          if [ -d "$SOURCE_DIR" ]; then
            for view_folder in "$SOURCE_DIR"/*/ ; do
              if [ -d "$view_folder" ]; then
                VIEW_NAME=$(basename "$view_folder")
                TARGET_DIR="snapshots_repo/ReferenceImages/$VIEW_NAME"
                
                mkdir -p "$TARGET_DIR"
                
                for image in "$view_folder"*.png; do
                  if [ -f "$image" ]; then
                    filename=$(basename "$image")
                    if [ ! -f "$TARGET_DIR/$filename" ] || ! cmp -s "$image" "$TARGET_DIR/$filename"; then
                      echo "Updating snapshot: $filename in $TARGET_DIR"
                      cp "$image" "$TARGET_DIR/"
                    fi
                  fi
                done
              fi
            done
          fi
      
          # Git operations
          cd snapshots_repo
          if git status --porcelain | grep -q '^'; then
            git add ReferenceImages/*/*.png
            git commit -m "Update snapshot images"
            git remote set-url origin https://${GITHUB_TOKEN}@github.com/SukyDev/GitStorageForSnapshots.git
            git push origin main
          fi

    #  - name: Build iOS application archive
    #    run: |
    #        cat $PWD/exportOptions.plist
    #        xcodebuild clean -project GithubActions.xcodeproj -scheme GithubActions
    #        xcodebuild archive -project GithubActions.xcodeproj -scheme GithubActions -archivePath $PWD/build/GithubActions.xcarchive INFOPLIST_FILE="$PWD/GithubActions/Info.plist"
    #        xcodebuild -exportArchive -archivePath $PWD/build/GithubActions.xcarchive -exportOptionsPlist $PWD/exportOptions.plist -exportPath $PWD/build
#
    #  - name: Decode App Store Connect private key file and save it
    #    env:
    #        API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
    #        API_KEY: ${{ secrets.KEY_ID }}     
    #    run: |
    #        mkdir -p ~/private_keys
    #        ls ~/private_keys
    #        echo -n "$API_KEY_BASE64" | base64 --decode -o ~/private_keys/AuthKey_$API_KEY.p8
    #        echo "After saving: "
    #        ls ~/private_keys

    #  - name: Check build directory before upload
    #    run: |
    #      echo "Contents of build directory:"
    #      ls -lh $PWD/build
  
    #  - name: Upload to App Store Connect
    #    env:
    #        ISSUER_ID: ${{ secrets.ISSUER_ID }}          
    #        API_KEY: ${{ secrets.KEY_ID }}     
    #    run: |
    #        echo "Before uploading: "
    #        ls ~/private_keys
    #        xcrun altool --upload-app -f build/LFM-GHactions.ipa -t ios --apiKey $API_KEY --apiIssuer "$ISSUER_ID"
    #        ls ~/private_keys
  
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          # Delete the temporary keychain
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
      
          # Remove the provisioning profile used for the project
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/GithubActions.mobileprovision